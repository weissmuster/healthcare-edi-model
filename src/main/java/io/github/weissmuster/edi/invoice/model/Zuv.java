/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package io.github.weissmuster.edi.invoice.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Zuv implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String registrationNumber;
    private String medicalNumber;
    private String medicalPrescriptionDate;
    private String additionalPaymentIndicator;
    private String accidentIndicator;
    private String indicatorBVG;
    private String indicatorMedicalPrescriptionFeature;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(registrationNumber != null) {
            nodeWriter.write(delimiters.escape(registrationNumber.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(medicalNumber != null) {
            nodeWriter.write(delimiters.escape(medicalNumber.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(medicalPrescriptionDate != null) {
            nodeWriter.write(delimiters.escape(medicalPrescriptionDate.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(additionalPaymentIndicator != null) {
            nodeWriter.write(delimiters.escape(additionalPaymentIndicator.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(accidentIndicator != null) {
            nodeWriter.write(delimiters.escape(accidentIndicator.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(indicatorBVG != null) {
            nodeWriter.write(delimiters.escape(indicatorBVG.toString()));
        }
        nodeWriter.write(delimiters.getField());
        if(indicatorMedicalPrescriptionFeature != null) {
            nodeWriter.write(delimiters.escape(indicatorMedicalPrescriptionFeature.toString()));
        }
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getRegistrationNumber() {
        return registrationNumber;
    }

    public Zuv setRegistrationNumber(String registrationNumber) {
        this.registrationNumber = registrationNumber;  return this;
    }

    public String getMedicalNumber() {
        return medicalNumber;
    }

    public Zuv setMedicalNumber(String medicalNumber) {
        this.medicalNumber = medicalNumber;  return this;
    }

    public String getMedicalPrescriptionDate() {
        return medicalPrescriptionDate;
    }

    public Zuv setMedicalPrescriptionDate(String medicalPrescriptionDate) {
        this.medicalPrescriptionDate = medicalPrescriptionDate;  return this;
    }

    public String getAdditionalPaymentIndicator() {
        return additionalPaymentIndicator;
    }

    public Zuv setAdditionalPaymentIndicator(String additionalPaymentIndicator) {
        this.additionalPaymentIndicator = additionalPaymentIndicator;  return this;
    }

    public String getAccidentIndicator() {
        return accidentIndicator;
    }

    public Zuv setAccidentIndicator(String accidentIndicator) {
        this.accidentIndicator = accidentIndicator;  return this;
    }

    public String getIndicatorBVG() {
        return indicatorBVG;
    }

    public Zuv setIndicatorBVG(String indicatorBVG) {
        this.indicatorBVG = indicatorBVG;  return this;
    }

    public String getIndicatorMedicalPrescriptionFeature() {
        return indicatorMedicalPrescriptionFeature;
    }

    public Zuv setIndicatorMedicalPrescriptionFeature(String indicatorMedicalPrescriptionFeature) {
        this.indicatorMedicalPrescriptionFeature = indicatorMedicalPrescriptionFeature;  return this;
    }
}