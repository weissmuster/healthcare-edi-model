/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package io.github.weissmuster.edi.invoice.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.util.List;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    

public class Unhs implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private Unh unh;
    private Fkt fkt;
    private Rec rec;
    private List<Inv> inv;
    private List<Ges> ges;
    private Nam nam;
    private List<Sllas> sllas;
    private Unt unt;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = writer;

        if(unh != null) {
            nodeWriter.write("UNH");
            nodeWriter.write(delimiters.getField());
            unh.write(nodeWriter, delimiters);
        }
        if(fkt != null) {
            nodeWriter.write("FKT");
            nodeWriter.write(delimiters.getField());
            fkt.write(nodeWriter, delimiters);
        }
        if(rec != null) {
            nodeWriter.write("REC");
            nodeWriter.write(delimiters.getField());
            rec.write(nodeWriter, delimiters);
        }
        if(inv != null && !inv.isEmpty()) {
            for(Inv invInst : inv) {
                nodeWriter.write("INV");
                nodeWriter.write(delimiters.getField());
                invInst.write(nodeWriter, delimiters);
            }
        }
        if(ges != null && !ges.isEmpty()) {
            for(Ges gesInst : ges) {
                nodeWriter.write("GES");
                nodeWriter.write(delimiters.getField());
                gesInst.write(nodeWriter, delimiters);
            }
        }
        if(nam != null) {
            nodeWriter.write("NAM");
            nodeWriter.write(delimiters.getField());
            nam.write(nodeWriter, delimiters);
        }
        if(sllas != null && !sllas.isEmpty()) {
            for(Sllas sllasInst : sllas) {
                sllasInst.write(nodeWriter, delimiters);
            }
        }
        if(unt != null) {
            nodeWriter.write("UNT");
            nodeWriter.write(delimiters.getField());
            unt.write(nodeWriter, delimiters);
        }
    }

    public Unh getUnh() {
        return unh;
    }

    public Unhs setUnh(Unh unh) {
        this.unh = unh;  return this;
    }

    public Fkt getFkt() {
        return fkt;
    }

    public Unhs setFkt(Fkt fkt) {
        this.fkt = fkt;  return this;
    }

    public Rec getRec() {
        return rec;
    }

    public Unhs setRec(Rec rec) {
        this.rec = rec;  return this;
    }

    public List<Inv> getInv() {
        return inv;
    }

    public Unhs setInv(List<Inv> inv) {
        this.inv = inv;  return this;
    }

    public List<Ges> getGes() {
        return ges;
    }

    public Unhs setGes(List<Ges> ges) {
        this.ges = ges;  return this;
    }

    public Nam getNam() {
        return nam;
    }

    public Unhs setNam(Nam nam) {
        this.nam = nam;  return this;
    }

    public List<Sllas> getSllas() {
        return sllas;
    }

    public Unhs setSllas(List<Sllas> sllas) {
        this.sllas = sllas;  return this;
    }

    public Unt getUnt() {
        return unt;
    }

    public Unhs setUnt(Unt unt) {
        this.unt = unt;  return this;
    }
}