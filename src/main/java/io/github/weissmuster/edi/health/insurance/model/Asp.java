/**
 * This class was generated by Smooks EJC (http://www.smooks.org).
 */
package io.github.weissmuster.edi.health.insurance.model;

import java.io.Serializable;    
import org.milyn.smooks.edi.EDIWritable;    
import java.io.Writer;    
import org.milyn.edisax.model.internal.Delimiters;    
import java.io.IOException;    
import java.io.StringWriter;    
import java.util.List;    
import java.util.ArrayList;    
import org.milyn.edisax.util.EDIUtils;    
import org.milyn.edisax.model.internal.DelimiterType;    

public class Asp implements Serializable, EDIWritable {

    private static final long serialVersionUID = 1L;

    private String number;
    private String phone;
    private String fax;
    private String name;
    private String fieldOfWorkFromContactPerson;

    public void write(Writer writer, Delimiters delimiters) throws IOException {
        
        Writer nodeWriter = new StringWriter();

        List<String> nodeTokens = new ArrayList<String>();

        if(number != null) {
            nodeWriter.write(delimiters.escape(number.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(phone != null) {
            nodeWriter.write(delimiters.escape(phone.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(fax != null) {
            nodeWriter.write(delimiters.escape(fax.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(name != null) {
            nodeWriter.write(delimiters.escape(name.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeWriter.write(delimiters.getField());
        if(fieldOfWorkFromContactPerson != null) {
            nodeWriter.write(delimiters.escape(fieldOfWorkFromContactPerson.toString()));
            nodeTokens.add(nodeWriter.toString());
            ((StringWriter)nodeWriter).getBuffer().setLength(0);
        }
        nodeTokens.add(nodeWriter.toString());
        writer.write(EDIUtils.concatAndTruncate(nodeTokens, DelimiterType.FIELD, delimiters));
        writer.write(delimiters.getSegmentDelimiter());
        writer.flush();
    }

    public String getNumber() {
        return number;
    }

    public Asp setNumber(String number) {
        this.number = number;  return this;
    }

    public String getPhone() {
        return phone;
    }

    public Asp setPhone(String phone) {
        this.phone = phone;  return this;
    }

    public String getFax() {
        return fax;
    }

    public Asp setFax(String fax) {
        this.fax = fax;  return this;
    }

    public String getName() {
        return name;
    }

    public Asp setName(String name) {
        this.name = name;  return this;
    }

    public String getFieldOfWorkFromContactPerson() {
        return fieldOfWorkFromContactPerson;
    }

    public Asp setFieldOfWorkFromContactPerson(String fieldOfWorkFromContactPerson) {
        this.fieldOfWorkFromContactPerson = fieldOfWorkFromContactPerson;  return this;
    }
}